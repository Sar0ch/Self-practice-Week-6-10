สิ่งที่เรียนวันนี้
- ได้ฝึกเขียนโค้ดเยอะมากหลายแบบ
- เข้าใจการ CRUD nodes มากขึ้น สามารถทำงานกับมันได้ดีขึ้น
- ยังงงๆเรื่อง dataset กับ classList บ้างแต่พยายามใช้ chatgpt อธิบายเพิ่มขึ้นแล้ว
- Practice 1 รู้สึกเข้าใจยังสามารถทำได้เอง
- Practice 2 รู้สึกว่าเริ่มมึนขึ้น เพราะต้องเอาเรื่อง dataset มาใช้


____________________________ Lecture ____________________________
Traverse node คือ การเดินทางไปแต่ละ node ความสัมพันธ์หลัก คือ 
parent - child แบบขึ้นลง 
แต่ถ้าแบบซ้ายขวา จะเป็นแบบ sibling

.getElementById("id") อันนี้ง่ายดี ใส่ id แล้วจบเลย
└──เป็นการหา object ที่มี id ตรงกัน ถ้าไม่เจอคืน null
    นอกจากนี้มีการใช้ .children เพื่อเข้าถึงลูกกร่วมด้วยได้ โดยลูกคนแรกจะเป็น children[0] 
       └── เป็นการหา ต้องใช้ Array.from เพราะ children คืนค่าเป็น HTMLCollection

NodeList [array-like (static)] ใช้ forEach ได้เลย

    .querySelector("#id")
    .querySelector(".class")
    query Selector จะ return first element ที่ตรงกับ css selector
    └── css selector # แทน id 
    └── css selector . แทน class

    .querySelectorAll(".meat")
    └── return เป็น nodelist ใช้กับ forEach ได้เลย

HTMLCollection [array-like (live)] ถ้าอยากใช้ forEach ต้อง convert Array ก่อน

    .getElementByName()
    └── สำหรับ query ที่เรารู้ชื่อ tag คืนค่าหลายตัวเป็น HTMLCollection

    .getElementsByTagName()
    └── สำหรับ query ที่เรารู้ชื่อ Tag เช่น get div tag ทั้งหมด คืนค่าหลายตัวเป็น Collection 
    └── เวลาจะใช้ต้องทำเป็น Array.form

    .getElementByClassName()
    └── สมมติต้องการหา vegan ทั้ง document ก็มาใช้อันนี้ได้ คืนค่าหลายตัวเป็น Collection
    └── เวลาจะใช้ต้องทำเป็น Array.form

ถ้าอยากเข้าถึง class ที่อยู่ใน id สามารถทำได้ด้วยการกำกับไว้เลย เช่น อยากได้ meat ทุกอันที่อยู่ใน appetizer
└── const allmeat = document.querySelectorAll('#appetizer .meat') 
    └── พอได้มาแล้วมันจะเป็น HTMLCollection หรือ Array-like ต้องแปลงเป็น array ด้วย Array.form 
└── Array.from(allmeat).forEach((allm) => console.log(allm))
‼️ แต่ถ้าอยากเข้าถึงลูกได้โดยตรงให้ใช้ > จะเป็นการเข้าถึงลูกตรงๆ
‼️ ถ้า (space) จะเข้าถึงทั้งลูกทั้งหลานทุกชั้น

‼️ วิธีง่ายใช้ Array.form จะเปลี่ยนจาก Array-like ➡️ Array ‼️

HTMLCollection(live) vs NodeList(static)
└── HTMLCollection(live)
    └── ถ้ามีการ createElement หลังจาก render แล้ว พอเราเช็ค .length อีกรอบมันจะเพิ่มขึ้น

└── NodeList(static)
    └── ถ้ามีการ createElement หลังจาก render มันเป็น static เลยจะไม่เพิ่มขึ้น

ุ‼️‼️‼️ ถ้าเรารู้ css selector เยอะจะทำให้เข้าถึงได้ง่ายขึ้น ‼️‼️‼️

// id ใช้ '#'
document.querySelector('#menu');

// class '.'
document.querySelectorAll('.meat');

// tag 'li:first-child' , 'ul:'
document.querySelectorAll('li');

// descendant 'เว้นวรรคเพื่อลูกทั้งหมดรวมหลานด้วย'
document.querySelectorAll('#appetizer .meat');

// child ' > คั่นระหว่าง id กับ class' เพื่อเข้าถึงลูกของclassนั้น
document.querySelectorAll('#appetizer > .meat');

C-R-U-D nodes มี แทรก , แทนที่ , ลบ
Insert ❤️
1️⃣ get parent - เข้าถึง parent มันก่อน เช่น soup
    └── document.getElementById(soup')

2️⃣ หา reference node - ว่าไว้ตรงไหนกับ keyword อะไร เช่น หา beef
    └── const refNode = Array.from(soupUl.children).find
    (li => li.textContent.includes("Beef Soup"))

3️⃣ create - ตัวที่เราอยากเพิ่มเข้ามา ก็บอกด้วยว่าเพิ่มตรงไหน เพิ่มคำว่าอะไร เพิ่มในคลาสไหน
    └── const newSoup = document.createElement("li")
    └── newSoup.textContent = ('Pork Soup')
    └── newSoup.setAttribute('class', 'meat')

4️⃣ Insert - แทรกมันเข้าไปมันจะไปอยู่ข้างหน้า
    └── soupUl.insertBefore(newSoup,refnode)
        1 → new → 2 → 3

❓ถ้าอยากเพิ่มไว้ข้างหลังล่ะ : 
    └── ให้ใช้ refnode ตัวเดิม แต่ให้ใช้ .nextElementSibling
        └── soupUl.insertBefore(newSoup,refnode.nextElementSibling)
        1 → 2 → new → 3

Delete💛
1️⃣ get parent - เข้าถึง parent มันก่อน เช่น soup
    └── document.getElementById(soup')

2️⃣ หา reference node - ว่าไว้ตรงไหนกับ keyword อะไร เช่น หา beef
    └── const refNode = Array.from(soupUl.children).find
    (li => li.textContent.includes("Beef Soup"))

3️⃣ remove ลบตัวที่เราอยากลบออกได้เลย 
    soupUl.removeChild(refNode)
    └── เท่านี้ก็เอา Beef Soup ออกไปแล้ว

Replace 🩵
1️⃣ get parent - เข้าถึง parent มันก่อน เช่น soup
    └── document.getElementById(soup')

2️⃣ หา reference node - ว่าไว้ตรงไหนกับ keyword อะไร เช่น หา beef
    └── const refNode = Array.from(soupUl.children).find
    (li => li.textContent.includes("Beef Soup"))

3️⃣ create - ตัวที่เราอยากเพิ่มเข้ามา ก็บอกด้วยว่าเพิ่มตรงไหน เพิ่มคำว่าอะไร เพิ่มในคลาสไหน
    └── const newSoup = document.createElement("li")
    └── newSoup.textContent = ('Pork Soup')
    └── newSoup.setAttribute('class', 'meat')

4️⃣ Replace - แทรกมันเข้าไป
    └── soupUl.replaceChild(newSoup,refNode3)
        1 → 2 → 3
        1 → new → 3

Event
└── เวลาเราจะ add event ต้อง queury

